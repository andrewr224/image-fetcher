#!/usr/bin/env ruby
# frozen_string_literal: true

File.join(Dir.home, '.rbrc').tap { |f| load f if File.exist?(f) }

class Service
  def self.call(*args)
    new(*args).call.tap do |result|
      return yield(result) if block_given?
    end
  end
end

class ImageFetcherOrganizer < Service
  def initialize(filenames:)
    @filenames = filenames
  end

  def call
    filenames.each(&method(:fetch_for_file))
  end

  private

  attr_reader :filenames

  def fetch_for_file(filename)
    File.foreach(filename).each(&method(:fetch_for_url))
  rescue Errno::ENOENT
    puts "File '#{filename}' doesn't exist!"
  rescue Errno::EPIPE
    exit
  end

  def fetch_for_url(url)
    puts url
  end
end

ImageFetcherOrganizer.call(filenames: ARGV)
